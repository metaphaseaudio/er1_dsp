#pragma once
//
// Created by Matt Zapp on 4/3/2018.
//


#include <array>
#include <cstdint>
#include <meta/audio/Asymp.h>
#include <meta/dsp/OnePoleLowPassFilter.h>
#include <meta/dsp/BandlimitedWavetable.h>

#define PARTIAL_COUNT 28
namespace meta
{
    namespace ER1
    {
        /**
         * This class defines a bandlimited wavetable oscillator that is used for
         * many of basic virtual analog synthesis functions in the ER-1.
         *
         * It offers the 2 audio-rate and 2 of the modulation-rate waveforms
         * originally supported by the ER-1: Sine, Triangle, Saw, and Square.
         * Analysis of the audio-rate waveforms indicates that the Triangle and
         * Sine functions are actually generated by integrating a bandlimited Square
         * signal, and thus the Triangle is not a clean shape, and the Sine includes
         * some additional odd harmonics in keeping with the original.
         */
        class Oscillator
        {
        public:
            enum WaveType
            {
                SINE = 0
                , TRIANGLE
                , SQUARE
                , SAW
            };

            WaveType waveType = WaveType::SINE;

            /// Makes an ER-1 Oscillator
            Oscillator();

            /// Produce the next sample of the waveform
            float tick();

            /**
             * Reset the Oscillator to pi (not 0!)
             * When Integrating a Square wave from its 0 value, a Triangle wave
             * will start at 0 and rise, but the ER-1 decays from 1, thus the
             * underlying function needs to either start at pi or be generated
             * from cosine instead of sine.
             */
            void reset();

            void setFrequency(float freq);

        private:
            void advanceAllPartials();

            enum Partials
            {
                odds
                , evens
            };

            float sumPartials(Partials p);

            meta::OnePoleLowPassFilter m_Integrate;
            meta::OnePoleLowPassFilter m_SineFilter;

            float m_TablePhases[PARTIAL_COUNT];
            float m_TableDeltas[PARTIAL_COUNT];
            float m_Coeffs[PARTIAL_COUNT];
			float m_MaxDelta;

            static std::array<float, 256> m_WaveTable;
        };
    }
}

